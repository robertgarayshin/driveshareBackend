package rest

import (
	_ "driveshare_backend/api" // docs are generated by Swag CLI, you have to import it.
	"driveshare_backend/internal/database/read"
	"driveshare_backend/internal/database/write"
	"driveshare_backend/internal/models"
	"driveshare_backend/internal/service"
	"encoding/json"
	"github.com/gorilla/mux"
	"log"
	"net/http"
	"strconv"
)

// SignupHandler
//
//	@Summary		Registration endpoint
//	@ID				signup
//	@Accept json
//	@Tags auth
//	@Param User body models.User true "query params"
//	@Success		200	{string}	string	"ok"
//	@Router			/auth/signup [post]
func SignupHandler(w http.ResponseWriter, r *http.Request) {
	decoder := json.NewDecoder(r.Body)
	var user models.User
	err := decoder.Decode(&user)
	if err != nil {
		return
	}
	user.Password, err = service.HashPassword(user.Password)
	service.SendVerificationEmail(user.Id, user.ConfirmationToken, []string{user.Email})
	if err != nil {
		return
	}
	write.CreateUser(user)
	log.Println(read.DbMock)
}

// SigninHandler
//
//	@Summary		Login endpoint
//	@ID				signin
//	@Accept json
//	@Tags auth
//	@Param Login body models.LoginInfo true "query params"
//	@Success		200	{object}	models.Payload	"ok"
//	@Router			/auth/signin [post]
func SigninHandler(w http.ResponseWriter, r *http.Request) {
	decoder := json.NewDecoder(r.Body)
	var credentials models.LoginInfo
	err := decoder.Decode(&credentials)
	if err != nil {
		return
	}
	token, err := service.SignIn(credentials, w)
	if err != nil {
		return
	}
	res, _ := json.Marshal(token)
	_, err = w.Write(res)
	if err != nil {
		return
	}
}

// EmailConfirmHandler
//
//	@Summary		Email Confirmation endpoint
//	@ID				confirm
//	@Tags email
//	@Param 			id   path      int  true  "Account ID"
//	@Param			token path	string true "Token String"
//	@Success		200	{string}	string	"ok"
//	@Router			/verify/{id}/{token} [get]
func EmailConfirmHandler(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	id, _ := strconv.Atoi(params["id"])
	token := params["token"]
	user, _ := read.GetUserById(id)
	if user.ConfirmationToken == token {
		write.ConfirmEmail(id)
		w.WriteHeader(http.StatusOK)
	} else {
		w.WriteHeader(http.StatusInternalServerError)
	}
}

// EditProfileHandler
//
//	@Summary		Profile edit endpoint
//	@ID				editProfile
//	@Accept json
//	@Tags user
//	@Param User body models.User true "user profile"
//	@Success		200	{string}	string	"ok"
//	@Router			/user/{id} [put]
func EditProfileHandler(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	id, _ := strconv.Atoi(params["id"])
	decoder := json.NewDecoder(r.Body)
	var editedUser models.User
	err := decoder.Decode(&editedUser)
	if err != nil {
		return
	}
	write.EditProfile(id, editedUser)
}

// DeleteProfileHandler
//
//	@Summary		Profile edit endpoint
//	@ID				deleteProfile
//	@Tags user
//	@Param        	id   path      int  true  "Account ID"
//	@Success		200	{string}	string	"ok"
//	@Router			/user/{id} [delete]
func DeleteProfileHandler(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	id, _ := strconv.Atoi(params["id"])
	write.DeleteProfile(id)
}

// GetUserByIdHandler
//
//		@Summary		Get User Profile by id
//		@ID				getById
//	 	@Accept json
//		@Tags 			user
//		@Param       	id   path      int  true  "Account ID"
//		@Success		200	{object}	models.User	"ok"
//		@Router			/user/{id} [get]
func GetUserByIdHandler(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	id, _ := strconv.Atoi(params["id"])
	user, err := service.GetProfileById(id)
	if err != nil {
		return
	}
	res, err := json.Marshal(user)
	_, err = w.Write(res)
	if err != nil {
		w.WriteHeader(http.StatusInternalServerError)
	}
}
